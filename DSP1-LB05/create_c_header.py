import datetime
import sys
from pathlib import Path
from string import Template

import numpy as np


# Header file template
header_file_text = """/*
* Filter Coefficients (C Source) generated by the Python Filter Design Analysis Tool
* Generated on: $generationDateTime
*/

/*
* Discrete-Time FIR Filter (real)
* -------------------------------
* Filter Length     : $filterLength
*/


# define b_len $filterLength

const $bCoeffDataType b_coeffs[b_len] = {
        $coeffData
};
"""


def export_coe_c_header(data, use_int32=True):
    """
    Save FIR filter coefficients to a C header
    Coefficient have to be specified by an identifier 'b0 ... b191' followed
    by the coefficient in normalized fractional format, e.g.

    b0 .053647
    b1 -.27485
    b2 .16497
    ...
    """

    dataType = "float"

    # Data Type
    if use_int32:
        data = (data * 2 ** 31).astype(np.int32)
        dataType = "int32_t"

    # Get Generation Date
    date_frmt = "%d-%B-%Y %H:%M:%S"
    generationDate = datetime.datetime.now().strftime(date_frmt)

    # How many filter coefficients are available
    filterLength = data[0].shape[0]

    # Convert data for Header file
    str_list = data.astype(str).tolist()[0]
    coeffDataString = ",\n\t".join(str_list)

    # Substitute data in Header file
    template = Template(header_file_text)
    substitution_dict = {
        "generationDateTime": generationDate,
        "filterLength": filterLength,
        "bCoeffDataType": dataType,
        "coeffData": coeffDataString,
    }

    exp_str = template.substitute(substitution_dict)

    return exp_str


if __name__ == "__main__":

    if len(sys.argv) < 2:
        raise Exception("Not enough arguments given. Specify path to source file!")

    src_file = sys.argv[1]
    src_file_path = Path(src_file).absolute()

    if not src_file_path.exists():
        raise FileNotFoundError("Source file not found!")

    dst_file = src_file_path.parent / "fdacoefs.h"

    try:
        data = np.load(src_file)
        np_data = data.astype(float)

    except:

        raise Exception("Could not read filter data.")

    file_content = export_coe_c_header(np_data, use_int32=False)

    with open(dst_file, "w") as f:
        f.write(file_content)
