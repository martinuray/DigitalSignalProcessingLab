import datetime
import numpy as np
import os
import sys

def export_coe_c_header(data, use_int32=True):
    """
    Save FIR filter coefficients to a C header
    Coefficient have to be specified by an identifier 'b0 ... b191' followed
    by the coefficient in normalized fractional format, e.g.

    b0 .053647
    b1 -.27485
    b2 .16497
    ...
    """

    if use_int32:
        data = (data * 2**31).astype(np.int32)

    date_frmt = "%d-%B-%Y %H:%M:%S"

    exp_str = "/*\n"
    exp_str += "* Filter Coefficients (C Source) generated by the Python Filter Design Analysis Tool\n"
    exp_str += "* Generated on: %s\n" % datetime.datetime.now().strftime(date_frmt)
    exp_str += "*/\n\n"

    exp_str += "/*\n"
    exp_str += "* Discrete-Time FIR Filter (real)\n"
    exp_str += "* -------------------------------\n"
    #exp_str += "* Filter Structure  : Direct-Form FIR\n"
    exp_str += "* Filter Length     : %d\n" % data[0].shape[0]
    #exp_str += "* Stable            : Yes\n"
    #exp_str += "* Linear Phase      : Yes (Type 1)\n"
    exp_str += "*/\n\n\n"

    if use_int32:
        exp_str += "#include <stdint.h>\n\n"

    exp_str += "#define b_len %d\n\n" % data[0].shape[0]
    if use_int32:
        exp_str += "const int32_t b_coeffs[b_len] = {\n    "
    else:
        exp_str += "const float b_coeffs[b_len] = {\n    "

    #for element in :
    #    exp_str += "    %s,\n" % element
    str_list = data.astype(str).tolist()[0]
    exp_str += ",\n    ".join(str_list)
    exp_str += "\n};\n\n"

    return exp_str


src_file = os.path.abspath(sys.argv[1])
print(src_file)
if not os.path.isfile(src_file):
    print("Input file not existing. Abort.")
    sys.exit(-1)
dst_file = os.path.join(os.path.dirname(src_file), "fdacoefs.h")

data = np.load(src_file)
np_data = data.astype(float)

file_content = export_coe_c_header(np_data, use_int32=False)
with open(dst_file, "w") as f:
    f.write(file_content)
